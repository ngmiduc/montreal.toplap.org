{"version":3,"sources":["webpack:///./src/Artists/styles.scss","webpack:///./src/Artists/index.jsx"],"names":["module","exports","item","tags","Artists","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","change","state","img","React","Component","_this2","width","size","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","react_meta_tags__WEBPACK_IMPORTED_MODULE_2__","title","react_stack_grid__WEBPACK_IMPORTED_MODULE_3___default","columnWidth","monitorImagesLoaded","duration","gridRef","grid","className","styles","artistgrid","key","artistlist","map","index","src","pic","url","alt","name","pseudo","domain","tag","country","rel","target","href","sizeMe"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,KAAA,uBAAAC,KAAA,+7BCMZC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,mGAAAC,CAAAC,KAAAJ,IACjBE,EAAAG,EAAAD,KAAAE,EAAAN,GAAAO,KAAAH,KAAMH,KACDA,MAAMO,OAAO,QAElBN,EAAKO,MAAQ,CACXC,IAAK,IALUR,wPADCS,IAAMC,+FAyCjB,IAAAC,EAAAT,KAEGU,EACNV,KAAKH,MADPc,KAAQD,MAGV,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYC,MAAM,kCAClBJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,YAAaR,GAAS,IAAM,MAAQ,IACpCS,qBAAqB,EACrBC,SAAU,EACVC,QAAS,SAAAC,GAAI,OAAKb,EAAKa,KAAOA,GAC9BC,UAAWC,IAAOC,YAElBb,EAAAC,EAAAC,cAAA,OAAKS,UAAWC,IAAO9B,KAAMgC,IAAI,KAC/Bd,EAAAC,EAAAC,cAAA,kHAMDd,KAAKH,MAAM8B,WAAWC,IAAI,SAAClC,EAAMmC,GAChC,OACEjB,EAAAC,EAAAC,cAAA,OAAKS,UAAWC,IAAO9B,KAAMgC,IAAKG,GAChCjB,EAAAC,EAAAC,cAAA,OAAKgB,IAAKpC,EAAKqC,IAAI,GAAGC,IAAKC,IAAI,KAC/BrB,EAAAC,EAAAC,cAAA,SACGpB,EAAKwC,KAAO,IACG,IAAfxC,EAAKyC,OAAe,GAAK,KAAOzC,EAAKyC,OAAS,OAC9CzC,EAAK0C,OAAOR,IAAI,SAACS,EAAKR,GACrB,OACEjB,EAAAC,EAAAC,cAAA,QAAMY,IAAKG,EAAON,UAAWC,IAAO7B,MACjC0C,KAIN,QAAU3C,EAAK4C,QAAU,QACb,IAAZ5C,EAAKsC,IAAY,KAChBpB,EAAAC,EAAAC,cAAA,KAAGyB,IAAI,WAAWC,OAAO,QAAQC,KAAM/C,EAAKsC,KAA5C,sDAcLU,gBAAS9C","file":"artist.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"styles__item___3hYu8\",\"tags\":\"styles__tags___2vNVN\"};","import React from \"react\"\nimport styles from \"./styles.scss\"\n\nimport { ReactTitle } from \"react-meta-tags\"\nimport StackGrid from \"react-stack-grid\"\nimport sizeMe from \"react-sizeme\"\n\nclass Artists extends React.Component {\n  constructor(props) {\n    super(props)\n    this.props.change(\"#000\")\n\n    this.state = {\n      img: []\n    }\n  }\n\n  componentDidMount() {\n    // var temp = []\n    // Promise.all(\n    //   this.props.artistlist.map((item, index) => {\n    //     // console.log(this.props.app)\n    //     return new Promise(resolve => {\n    //       console.log(this.props.app)\n    //       this.props.app.storage\n    //         .getURL(item.pic[0], {\n    //           size: { width: 375, height: 9999, quality: 1 }\n    //         })\n    //         .then(url => {\n    //           console.log(\"loaded image\" + index)\n    //           temp[index] = url\n    //           resolve(url)\n    //         })\n    //     })\n    //   })\n    // )\n    //   .then(() => {\n    //     console.log(\"all images loaded\")\n    //     this.setState({\n    //       img: temp\n    //     })\n    //   })\n    //   .then(() => {\n    //     console.log(\"update grid\")\n    //     this.grid.updateLayout()\n    //   })\n  }\n\n  render() {\n    const {\n      size: { width }\n    } = this.props\n\n    return (\n      <div>\n        <ReactTitle title=\"{toplap > montreal > artists}\" />\n        <StackGrid\n          columnWidth={width <= 768 ? \"40%\" : 130}\n          monitorImagesLoaded={true}\n          duration={0}\n          gridRef={grid => (this.grid = grid)}\n          className={styles.artistgrid}\n        >\n          <div className={styles.item} key=\"0\">\n            <p>\n              send us a short description about yourself and a photo in order to\n              get added into the community list\n            </p>\n          </div>\n\n          {this.props.artistlist.map((item, index) => {\n            return (\n              <div className={styles.item} key={index}>\n                <img src={item.pic[0].url} alt=\"\" />\n                <p>\n                  {item.name + \" \"}\n                  {item.pseudo == \"\" ? \"\" : \" (\" + item.pseudo + \") % \"}\n                  {item.domain.map((tag, index) => {\n                    return (\n                      <span key={index} className={styles.tags}>\n                        {tag}\n                      </span>\n                    )\n                  })}\n                  {\" %  (\" + item.country + \") => \"}\n                  {item.url == \"\" ? null : (\n                    <a rel=\"nofollow\" target=\"blank\" href={item.url}>\n                      website\n                    </a>\n                  )}\n                </p>\n              </div>\n            )\n          })}\n        </StackGrid>\n      </div>\n    )\n  }\n}\n\nexport default sizeMe()(Artists)\n"],"sourceRoot":""}